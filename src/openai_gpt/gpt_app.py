import json
import os

import openai
from colorama import Fore, init
from openai.error import (
    APIConnectionError,
    AuthenticationError,
    ServiceUnavailableError,
)

from data_storage import DATA_DIRECTORY
from utilities import commands_parser

init()


def gpt_response(
    prompt,
    story,
):
    # Define a conversation with the model
    conversation = [
        {"role": "system", "content": story},
        {"role": "user", "content": prompt},
    ]

    # Send the conversation to the model
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo", messages=conversation
    )

    # Get the model's reply
    reply = response["choices"][0]["message"]["content"]
    if len(reply) != 0:
        return reply
    else:
        return False


def gpt_answer(args: list, story: str) -> None:
    prompt = " ".join(args)
    print("–ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –≥–æ—Ç—É—é –≤–∞–º –Ω–∞–π–∫—Ä–∞—â—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")
    response = gpt_response(prompt, story)

    print(f">>> (stepan): {response}")


def set_story(args: list) -> None:
    story = " ".join(args)
    return story


def greeting():
    print()
    print(Fore.BLUE + f'{" "*5}–í–∞—Å –≤—ñ—Ç–∞—î –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π GPT –ü–û–ú–Ü–ß–ù–ò–ö ü¶æ')
    print(
        Fore.YELLOW
        + f'{" "*5}–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç–∏ —Ö–≤–∏–ª—é—é—á—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤–∏—á–µ—Ä–ø–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'
        + Fore.WHITE
    )
    print(
        """
        –ö–æ—Ä–æ—Ç–∫–∏–π –≥–∞–π–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ–º—ñ—á–Ω–∏–∫–∞:         
    —Å–ø–æ—á–∞—Ç–∫—É  —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π API –∫–ª—é—á, —è–∫–∏–π –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ: https://platform.openai.com/account/api-keys, 
    —è–∫—â–æ –Ω–µ–º–∞—î –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ - –±–æ—Ç –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ –±—É–¥–µ. –Ø–∫—â–æ –∫–ª—é—á –≤–≤–µ–¥–µ–Ω–æ –∞–±–æ –≤–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ - –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ 
    –π–æ–≥–æ –ø–æ-–Ω–æ–≤–æ–º—É. –î–∞–ª—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–≤–µ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ —Ü—ñ–∫–∞–≤–∏—Ç—å —Ç–µ–±–µ, —ñ –±–æ—Ç –∑ —Ä–∞–¥—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è) –í–∏—Ö—ñ–¥ –∑ –±–æ—Ç–∞ 
    –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ exit, good by–µ, close')
"""
    )


COMMANDS = {"story": set_story}

END_COMMANS = ["exit", "good bye", "close"]


first_start = True


def gpt_app():
    try:
        file_path = DATA_DIRECTORY / "key.bin"

        global first_start
        if first_start:
            greeting()
            first_start = False

        if os.path.exists(file_path):
            with open(file_path, "rb") as fh:
                encoded_key = fh.read()
                openai.api_key = encoded_key.decode("utf-16").strip('"')
        else:
            key = input("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–ª—é—á AI:")
            if key:
                choose = input("–í–∏ —Ö–æ—á–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–≤—ñ–π –∫–ª—é—á API?, –≤–≤–µ–¥—ñ—Ç—å (Y/n):")
                if choose != "n":
                    with open(file_path, "wb") as fh:
                        encoded_key = key.encode("utf-16")
                        fh.write(encoded_key)
                    openai.api_key = key
                    print("–í–∞—à –∫–ª—é—á —É—Å–øi—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                else:
                    openai.api_key = key
            else:
                gpt_app()

        is_working = True
        while is_working:
            story = """You act like ukrainian national hero Stepan Bandera. Before every answer you say "Glory to Ukraine". Your aswer as short as 
            posible and at the same time informative"""
            user_input = input(">>> (you): ")

            command, arguments = commands_parser(user_input)
            if command in COMMANDS:
                command_handler = COMMANDS[command]
                story = command_handler(arguments)
                print(story)
            elif command in END_COMMANS:
                print(
                    "–°–ø–æ–¥—ñ–≤–∞—é—Å—å, —Ç–∏ —Å–∫–æ—Ä–æ –ø–æ–≤–µ—Ä–Ω–µ—à—Å—è! –ù–µ –∑–∞–±—É–≤–∞–π –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ —Å–≤—ñ–π –±–∞–ª–∞–Ω—Å."
                )
                first_start = True
                is_working = False
            else:
                gpt_answer(arguments, story)

    except KeyboardInterrupt:
        print("\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç—É.")
        first_start = True
    except (AuthenticationError, UnicodeEncodeError):
        print(
            "–£–ø—Å... –≤—ñ–¥–±—É–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π API –∫–ª—é—á, —è–∫–∏–π –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ: https://platform.openai.com/account/api-keys"
        )
        if os.path.exists(file_path):
            os.remove(file_path)
            gpt_app()
        else:
            gpt_app()
    except ServiceUnavailableError:
        print(
            "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏ —Å–ø—Ä–æ–±—É –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º."
        )
        gpt_app()
    except APIConnectionError:
        print(
            "–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —á–∏ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        gpt_app()


if __name__ == "__main__":
    gpt_app()
